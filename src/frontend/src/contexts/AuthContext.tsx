/* eslint-disable react-refresh/only-export-components */
import React, { createContext, useState, useEffect } from 'react';
import type { ReactNode } from 'react';
import type { User, AuthState, AuthContextType } from './types';
import { apiClient, TokenManager } from '../lib/api';
import { useNavigate, useLocation } from 'react-router-dom';
import signalrService from '../lib/signalrService';

// –ö–æ–Ω—Ç–µ–∫—Å—Ç
export const AuthContext = createContext<AuthContextType | null>(null);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const navigate = useNavigate();
  const location = useLocation();
  
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    isAuthenticated: false,
    isLoading: true,
    pendingVerificationEmail: null
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  useEffect(() => {
    if (authState.isAuthenticated && authState.user?.isEmailVerified) {
      console.log("üöÄ AuthProvider: User authenticated and verified, starting SignalR...");
      signalrService.startConnection();
    }

    return () => {
      if (authState.isAuthenticated) {
        console.log("üöÄ AuthProvider: Cleaning up, stopping SignalR connection...");
        signalrService.stopConnection();
      }
    };
  }, [authState.isAuthenticated, authState.user?.isEmailVerified]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkAuthState = () => {
      try {
        const isAuth = TokenManager.isAuthenticated();
        const user = TokenManager.getUser();
        
        if (isAuth && user) {
          setAuthState({
            user: {
              id: user.id,
              email: user.email,
              username: user.username,
              isEmailVerified: user.isEmailVerified
            },
            isAuthenticated: true,
            isLoading: false,
            pendingVerificationEmail: user.isEmailVerified ? null : user.email
          });
        } else {
          // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–æ–∫–µ–Ω—ã
          TokenManager.removeToken();
          setAuthState({
            user: null,
            isAuthenticated: false,
            isLoading: false,
            pendingVerificationEmail: null
          });
        }
      } catch (error) {
        console.error('Error checking auth state:', error);
        TokenManager.removeToken();
        setAuthState({
          user: null,
          isAuthenticated: false,
          isLoading: false,
          pendingVerificationEmail: null
        });
      }
    };

    checkAuthState();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (authState.isAuthenticated && !authState.isLoading) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—É—é)
      const authPages = ['/login', '/register', '/reset-password', '/new-password'];
      const isOnAuthPage = authPages.some(page => location.pathname.startsWith(page));
      
      if (isOnAuthPage) {
        navigate('/app', { replace: true });
      }
    }
  }, [authState.isAuthenticated, authState.isLoading, location.pathname, navigate]);

   
  const login = async (email: string, password: string) => {
    console.log('üîê –í—Ö–æ–¥ –¥–ª—è:', email);
    
    setAuthState(prev => ({ ...prev, isLoading: true }));
    
    try {
      // API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ TokenManager
      const response = await apiClient.login({ email, password });

      if (!response.success || !response.user) {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
      }

      const user: User = {
        id: response.user.id,
        email: response.user.email,
        username: response.user.username,
        isEmailVerified: response.user.isEmailVerified
      };

      setAuthState({
        user,
        isAuthenticated: true, // JWT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è
        isLoading: false,
        pendingVerificationEmail: null // –ü—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ –ø–∞—Ä–æ–ª—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
      });
      
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      setAuthState(prev => ({ ...prev, isLoading: false }));
      throw error;
    }
  };

  const register = async (userData: { username: string; email: string; password: string }) => {
    console.log('Registration attempt:', userData);
    
    setAuthState(prev => ({ ...prev, isLoading: true }));
    
    try {
      // API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ TokenManager
      const response = await apiClient.register(userData);
      
      if (!response.success || !response.user) {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
      
      const user: User = {
        id: response.user.id,
        email: response.user.email,
        username: response.user.username,
        isEmailVerified: response.user.isEmailVerified
      };

      setAuthState({
        user,
        isAuthenticated: true, // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        isLoading: false,
        pendingVerificationEmail: user.isEmailVerified ? null : user.email
      });
      
    } catch (error) {
      setAuthState(prev => ({ ...prev, isLoading: false }));
      throw error;
    }
  };

  const verifyEmail = async (code: string) => {
    console.log('Verifying code:', code);
    
    setAuthState(prev => ({ ...prev, isLoading: true }));
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
      const response = await apiClient.verifyEmail({ code });
      
      if (!response.success || !response.user) {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
      const updatedUser: User = {
        id: response.user.id,
        email: response.user.email,
        username: response.user.username,
        isEmailVerified: response.user.isEmailVerified
      };
      
      setAuthState({
        user: updatedUser,
        isAuthenticated: true,
        isLoading: false,
        pendingVerificationEmail: null
      });
      
    } catch (error) {
      setAuthState(prev => ({ ...prev, isLoading: false }));
      throw error;
    }
  };

  const resendVerificationCode = async () => {
    await apiClient.resendVerificationCode();
  };

  const resetPassword = async (email: string) => {
    console.log('Reset password request for:', email);
    await apiClient.forgotPassword({ email });
  };

  const updatePassword = async (token: string, newPassword: string) => {
    console.log('Update password with token:', token, 'New password length:', newPassword.length);
    await apiClient.resetPassword({ token, newPassword });
  };

  const logout = () => {
    console.log('üöÄ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    signalrService.stopConnection();

    TokenManager.removeToken();
    setAuthState({
      user: null,
      isAuthenticated: false,
      isLoading: false,
      pendingVerificationEmail: null
    });
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    navigate('/', { replace: true });
  };

  const googleAuth = async (idToken: string) => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true }));

      const response = await apiClient.googleAuth({ idToken });

      if (!response.success || !response.user) {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google');
      }

      const user: User = {
        id: response.user.id,
        email: response.user.email,
        username: response.user.username,
        isEmailVerified: response.user.isEmailVerified
      };

      setAuthState({
        user,
        isAuthenticated: true,
        isLoading: false,
        pendingVerificationEmail: user.isEmailVerified ? null : user.email
      });
    } catch (error) {
      setAuthState(prev => ({ ...prev, isLoading: false }));
      throw error;
    }
  };

  const gitHubAuth = async (accessToken: string) => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true }));

      const response = await apiClient.gitHubAuth({ accessToken });

      if (!response.success || !response.user) {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GitHub');
      }

      const user: User = {
        id: response.user.id,
        email: response.user.email,
        username: response.user.username,
        isEmailVerified: response.user.isEmailVerified
      };

      setAuthState({
        user,
        isAuthenticated: true,
        isLoading: false,
        pendingVerificationEmail: user.isEmailVerified ? null : user.email
      });
    } catch (error) {
      setAuthState(prev => ({ ...prev, isLoading: false }));
      throw error;
    }
  };

  const value: AuthContextType = {
    user: authState.user,
    isAuthenticated: authState.isAuthenticated,
    isLoading: authState.isLoading,
    pendingVerificationEmail: authState.pendingVerificationEmail,
    login,
    register,
    logout,
    verifyEmail,
    resendVerificationCode,
    resetPassword,
    updatePassword,
    googleAuth,
    gitHubAuth
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}; 