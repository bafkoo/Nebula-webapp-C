import React, { useEffect, useRef, useState } from 'react';
import ChatMessageItem from './ChatMessageItem';

interface Message {
  id: string;
  userId: string;
  userName: string;
  content: string;
  createdAt: string;
  type: 'text' | 'system';
  isOwnMessage?: boolean;
}

interface ChatMessageListProps {
  chatId: string | null;
  className?: string;
}

const ChatMessageList: React.FC<ChatMessageListProps> = ({ 
  chatId, 
  className = "" 
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Mock messages data - –≤—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ useEffect –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const mockMessages: Record<string, Message[]> = React.useMemo(() => ({
    '1': [
      {
        id: '1',
        userId: 'user1',
        userName: '–°–∏—Å—Ç–µ–º–∞',
        content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç!',
        createdAt: '2024-01-01T10:00:00',
        type: 'system'
      },
      {
        id: '2',
        userId: 'user2',
        userName: '–ê–ª–µ–∫—Å–µ–π –ú.',
        content: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?',
        createdAt: '2024-01-01T10:05:00',
        type: 'text'
      },
      {
        id: '3',
        userId: 'current',
        userName: '–í—ã',
        content: '–ü—Ä–∏–≤–µ—Ç! –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –Ω–æ–≤—ã–º–∏ —Ñ–∏—á–∞–º–∏.',
        createdAt: '2024-01-01T10:07:00',
        type: 'text',
        isOwnMessage: true
      },
      {
        id: '4',
        userId: 'user3',
        userName: '–ú–∞—Ä–∏—è –ö.',
        content: '–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–∫–æ–Ω—á–∏–ª–∞ —Å –¥–∏–∑–∞–π–Ω–æ–º, –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.',
        createdAt: '2024-01-01T10:10:00',
        type: 'text'
      }
    ],
    '2': [
      {
        id: '5',
        userId: 'user2',
        userName: '–ê–ª–µ–∫—Å–µ–π –ú.',
        content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —á–∞—Ç–æ–º?',
        createdAt: '2024-01-01T09:00:00',
        type: 'text'
      },
      {
        id: '6',
        userId: 'current',
        userName: '–í—ã',
        content: '–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å –¥–µ–ª–∞—é –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
        createdAt: '2024-01-01T09:02:00',
        type: 'text',
        isOwnMessage: true
      },
      {
        id: '7',
        userId: 'user2',
        userName: '–ê–ª–µ–∫—Å–µ–π –ú.',
        content: '–ó–≤—É—á–∏—Ç –∫—Ä—É—Ç–æ! –ë—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∏–º–µ—Ç—å —á–∞—Ç –ø—Ä—è–º–æ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ.',
        createdAt: '2024-01-01T09:05:00',
        type: 'text'
      }
    ],
    '3': [
      {
        id: '8',
        userId: 'user1',
        userName: '–°–∏—Å—Ç–µ–º–∞',
        content: '–ß–∞—Ç "–ü—Ä–æ–µ–∫—Ç Alpha" —Å–æ–∑–¥–∞–Ω',
        createdAt: '2024-01-01T08:00:00',
        type: 'system'
      },
      {
        id: '9',
        userId: 'user1',
        userName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ Alpha! –ó–¥–µ—Å—å –æ–±—Å—É–∂–¥–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É.',
        createdAt: '2024-01-01T08:01:00',
        type: 'text'
      }
    ]
  }), []);

  useEffect(() => {
    if (!chatId) {
      setMessages([]);
      return;
    }

    setLoading(true);
    // Simulate API call
    setTimeout(() => {
      setMessages(mockMessages[chatId] || []);
      setLoading(false);
    }, 300);
  }, [chatId, mockMessages]);

  useEffect(() => {
    // Auto-scroll to bottom when new messages arrive
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  if (!chatId) {
    return (
      <div className={`flex items-center justify-center h-full text-muted-foreground ${className}`}>
        <div className="text-center">
          <div className="text-sm mb-2">üí¨</div>
          <div className="text-xs">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className={`flex items-center justify-center h-full ${className}`}>
        <div className="flex items-center gap-2 text-muted-foreground">
          <div className="w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
          <span className="text-xs">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</span>
        </div>
      </div>
    );
  }

  return (
    <div className={`flex flex-col h-full ${className}`}>
      <div className="flex-1 overflow-y-auto p-3 space-y-2">
        {messages.length === 0 ? (
          <div className="flex items-center justify-center h-full text-muted-foreground">
            <div className="text-center">
              <div className="text-sm mb-2">üì≠</div>
              <div className="text-xs">–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
              <div className="text-xs mt-1">–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</div>
            </div>
          </div>
        ) : (
          messages.map((message) => (
            <ChatMessageItem 
              key={message.id} 
              message={message}
            />
          ))
        )}
        <div ref={messagesEndRef} />
      </div>
    </div>
  );
};

export default ChatMessageList; 