import React, { useState, useEffect, useCallback } from 'react';
import { WidgetContainer } from '../WidgetContainer';
import { Button } from '../../../ui/Button';
import { Badge } from '../../../ui/Badge';
import { SparklesIcon, TrophyIcon, CalendarIcon, GroupUsersIcon } from '../../../icons';
import type { QuickConnectionsData, FavoriteServer, RecentServer } from '../../../../types/dashboard';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ mockup –¥–∞–Ω–Ω—ã–µ
const mockQuickConnectionsData: QuickConnectionsData = {
  favoriteServers: [
    {
      id: "1",
      name: "üèÜ Pro Gamers Elite",
      game: "CS:GO",
      playerCount: { online: 47, total: 50 },
      ping: 12,
      favorite: true,
      hasPassword: false
    },
    {
      id: "2", 
      name: "üá∑üá∫ CS:GO RU Official",
      game: "CS:GO",
      playerCount: { online: 94, total: 100 },
      ping: 8,
      favorite: true,
      hasPassword: false
    },
    {
      id: "3",
      name: "üéØ Elite Valorant Squad",
      game: "Valorant", 
      playerCount: { online: 18, total: 20 },
      ping: 15,
      favorite: true,
      hasPassword: true
    },
    {
      id: "4",
      name: "‚öîÔ∏è Dota 2 Legends",
      game: "Dota 2",
      playerCount: { online: 28, total: 40 },
      ping: 22,
      favorite: true,
      hasPassword: false
    },
    {
      id: "5",
      name: "üî• Apex Predators",
      game: "Apex Legends",
      playerCount: { online: 55, total: 60 },
      ping: 18,
      favorite: true,
      hasPassword: true
    }
  ],
  recentServers: [
    {
      id: "recent1",
      name: "üé§ Team Strategy Meeting", 
      game: "Discord Voice",
      lastJoined: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 —á–∞—Å –Ω–∞–∑–∞–¥
      duration: 75
    },
    {
      id: "recent2",
      name: "üèÖ Tournament Practice",
      game: "CS:GO", 
      lastJoined: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
      duration: 180
    },
    {
      id: "recent3",
      name: "‚ö° Quick Match Lobby",
      game: "Valorant",
      lastJoined: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      duration: 45
    },
    {
      id: "recent4",
      name: "üåü Community Hangout",
      game: "Discord Voice",
      lastJoined: new Date(Date.now() - 12 * 60 * 60 * 1000), // 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      duration: 240
    }
  ],
  quickJoinEnabled: true
};

interface ConnectionStatus {
  status: 'idle' | 'connecting' | 'connected' | 'failed' | 'reconnecting';
  server?: string;
  attempt?: number;
}

interface SmartRecommendation {
  serverId: string;
  reason: string;
  score: number;
  badge: string;
}

interface QuickConnectionsWidgetProps {
  animationDelay?: number;
}

export const QuickConnectionsWidget: React.FC<QuickConnectionsWidgetProps> = ({
  animationDelay = 0
}) => {
  const [data, setData] = useState(mockQuickConnectionsData);
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({ status: 'idle' });
  const [notifications, setNotifications] = useState<string[]>([]);
  const [showAllFavorites, setShowAllFavorites] = useState(false);
  const [showAllRecent, setShowAllRecent] = useState(false);
  const [smartRecommendations, setSmartRecommendations] = useState<SmartRecommendation[]>([]);
  const [pingUpdates, setPingUpdates] = useState<Record<string, number>>({});
  const [autoReconnectEnabled, setAutoReconnectEnabled] = useState(true);
  const [currentTime, setCurrentTime] = useState(new Date());

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
  useEffect(() => {
    const pingInterval = setInterval(() => {
      setData(prevData => ({
        ...prevData,
        favoriteServers: prevData.favoriteServers.map(server => {
          // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏–Ω–≥–∞ ¬±5ms
          const pingVariation = Math.floor(Math.random() * 10) - 5;
          const newPing = Math.max(5, server.ping + pingVariation);
          
          setPingUpdates(prev => ({
            ...prev,
            [server.id]: newPing
          }));

          return {
            ...server,
            ping: newPing,
            // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
            playerCount: {
              ...server.playerCount,
              online: Math.min(
                server.playerCount.total,
                Math.max(1, server.playerCount.online + Math.floor(Math.random() * 6) - 3)
              )
            }
          };
        })
      }));
    }, 5000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(pingInterval);
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  useEffect(() => {
    const generateRecommendations = () => {
      const recommendations: SmartRecommendation[] = [];
      
      data.favoriteServers.forEach(server => {
        let score = 0;
        let reason = '';
        let badge = '';

        // –õ–æ–≥–∏–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞
        if (server.ping <= 15) {
          score += 30;
          reason = '–û—Ç–ª–∏—á–Ω—ã–π –ø–∏–Ω–≥';
          badge = '‚ö°';
        }
        
        if (server.playerCount.online / server.playerCount.total > 0.8) {
          score += 25;
          reason = reason ? `${reason} ‚Ä¢ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å` : '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
          badge = badge || 'üî•';
        }

        if (server.playerCount.online >= 10 && server.playerCount.online <= 30) {
          score += 20;
          reason = reason ? `${reason} ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–±–±–∏` : '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–±–±–∏';
          badge = badge || 'üë•';
        }

        if (!server.hasPassword) {
          score += 15;
        }

        if (score >= 40) {
          recommendations.push({
            serverId: server.id,
            reason,
            score,
            badge
          });
        }
      });

      setSmartRecommendations(recommendations.sort((a, b) => b.score - a.score).slice(0, 2));
    };

    generateRecommendations();
  }, [data]);

  const addNotification = useCallback((message: string) => {
    setNotifications(prev => [...prev, message]);
    setTimeout(() => {
      setNotifications(prev => prev.slice(1));
    }, 4000);
  }, []);

  const handleConnect = async (server: FavoriteServer) => {
    setConnectionStatus({ status: 'connecting', server: server.name });
    addNotification(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${server.name}...`);

    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 1500));

    const success = Math.random() > 0.1; // 90% —É—Å–ø–µ—Ö

    if (success) {
      setConnectionStatus({ status: 'connected', server: server.name });
      addNotification(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ${server.name}!`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ
      const newRecentServer: RecentServer = {
        id: `recent_${Date.now()}`,
        name: server.name,
        game: server.game,
        lastJoined: new Date(),
        duration: 0
      };
      
      setData(prev => ({
        ...prev,
        recentServers: [newRecentServer, ...prev.recentServers.slice(0, 3)]
      }));
    } else {
      setConnectionStatus({ status: 'failed', server: server.name });
      addNotification(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${server.name}`);
      
      if (autoReconnectEnabled) {
        setTimeout(() => {
          setConnectionStatus({ status: 'reconnecting', server: server.name, attempt: 1 });
          addNotification(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`);
          handleConnect(server);
        }, 3000);
      }
    }

    setTimeout(() => {
      setConnectionStatus({ status: 'idle' });
    }, 2000);
  };

  const handleQuickJoin = () => {
    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
    const bestServer = data.favoriteServers
      .filter(s => !s.hasPassword && s.playerCount.online > 5)
      .sort((a, b) => {
        const scoreA = (100 - a.ping) + (a.playerCount.online * 2);
        const scoreB = (100 - b.ping) + (b.playerCount.online * 2);
        return scoreB - scoreA;
      })[0];

    if (bestServer) {
      addNotification(`üéØ –£–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä`);
      handleConnect(bestServer);
    } else {
      addNotification(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
    }
  };

  const handleReconnect = (recentServer: RecentServer) => {
    const originalServer = data.favoriteServers.find(s => s.name === recentServer.name);
    if (originalServer) {
      addNotification(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${recentServer.name}...`);
      handleConnect(originalServer);
    } else {
      addNotification(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä ${recentServer.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  };

  const formatLastJoined = (date: Date) => {
    const diffMs = currentTime.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMins = Math.floor(diffMs / (1000 * 60));
    
    if (diffHours >= 24) {
      const diffDays = Math.floor(diffHours / 24);
      return `${diffDays}–¥ –Ω–∞–∑–∞–¥`;
    }
    if (diffHours > 0) {
      return `${diffHours}—á –Ω–∞–∑–∞–¥`;
    }
    return `${diffMins}–º –Ω–∞–∑–∞–¥`;
  };

  const getPingColor = (ping: number) => {
    if (ping <= 20) return 'text-green-400';
    if (ping <= 50) return 'text-yellow-400';
    if (ping <= 100) return 'text-orange-400';
    return 'text-red-400';
  };

  const getServerHealthColor = (server: FavoriteServer) => {
    const healthRatio = server.playerCount.online / server.playerCount.total;
    if (healthRatio >= 0.8) return 'text-green-400';
    if (healthRatio >= 0.5) return 'text-yellow-400';
    if (healthRatio >= 0.2) return 'text-orange-400';
    return 'text-red-400';
  };

  const getConnectionStatusIcon = (status: ConnectionStatus['status']) => {
    switch (status) {
      case 'connecting': return 'üîÑ';
      case 'connected': return '‚úÖ';
      case 'failed': return '‚ùå';
      case 'reconnecting': return 'üîÑ';
      default: return '';
    }
  };

  const visibleFavorites = showAllFavorites ? data.favoriteServers : data.favoriteServers.slice(0, 3);
  const visibleRecent = showAllRecent ? data.recentServers : data.recentServers.slice(0, 2);

  return (
    <WidgetContainer
      id="quick-connections"
      title="–ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
      icon={<SparklesIcon size={20} className="text-primary" />}
      animationDelay={animationDelay}
    >
      <div className="space-y-4">
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        {notifications.length > 0 && (
          <div className="space-y-1">
            {notifications.map((notification, index) => (
              <div 
                key={index}
                className="text-xs bg-primary/10 text-primary px-2 py-1 rounded animate-in slide-in-from-top-2 duration-300"
              >
                {notification}
              </div>
            ))}
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        {connectionStatus.status !== 'idle' && (
          <div className="p-2 bg-accent/30 rounded-lg border border-border/50">
            <div className="flex items-center space-x-2 text-xs">
              <span className="animate-pulse">{getConnectionStatusIcon(connectionStatus.status)}</span>
              <span className="text-foreground">
                {connectionStatus.status === 'connecting' && `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${connectionStatus.server}...`}
                {connectionStatus.status === 'connected' && `–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ${connectionStatus.server}`}
                {connectionStatus.status === 'failed' && `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${connectionStatus.server}`}
                {connectionStatus.status === 'reconnecting' && `–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... (–ø–æ–ø—ã—Ç–∫–∞ ${connectionStatus.attempt})`}
              </span>
            </div>
          </div>
        )}

        {/* –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {smartRecommendations.length > 0 && (
          <div className="p-3 bg-gradient-to-r from-primary/10 to-accent/20 rounded-lg border border-primary/20">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-sm font-medium text-foreground flex items-center">
                <TrophyIcon size={14} className="mr-1 text-yellow-400" />
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
              </h4>
              <Badge variant="default" className="text-xs">AI</Badge>
            </div>
            <div className="space-y-1">
              {smartRecommendations.map(rec => {
                const server = data.favoriteServers.find(s => s.id === rec.serverId);
                return server ? (
                  <div key={rec.serverId} className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm">{rec.badge}</span>
                      <span className="text-xs text-foreground font-medium">{server.name}</span>
                    </div>
                    <Button 
                      size="sm"
                      variant="primary"
                      className="text-xs px-2 py-1 h-auto"
                      onClick={() => handleConnect(server)}
                      disabled={connectionStatus.status !== 'idle'}
                    >
                      –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    </Button>
                  </div>
                ) : null;
              })}
            </div>
            <p className="text-xs text-muted-foreground mt-1">{smartRecommendations[0]?.reason}</p>
          </div>
        )}

        {/* –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ */}
        {data.quickJoinEnabled && (
          <div className="p-3 bg-accent/20 rounded-lg border border-border/50">
            <div className="flex items-center justify-between">
              <div>
                <h4 className="text-sm font-medium text-foreground flex items-center">
                  <SparklesIcon size={14} className="mr-1 text-primary" />
                  –£–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                </h4>
                <p className="text-xs text-muted-foreground">
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                </p>
              </div>
              <Button 
                variant="primary"
                size="sm" 
                onClick={handleQuickJoin}
                disabled={connectionStatus.status !== 'idle'}
                className="text-xs"
              >
                üéØ –ù–∞–π—Ç–∏ –∏–≥—Ä—É
              </Button>
            </div>
          </div>
        )}

        {/* –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã */}
        <div>
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-medium text-foreground">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã</h4>
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              <div className="w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse"></div>
              <span>Live</span>
            </div>
          </div>
          
          <div className="space-y-2">
            {visibleFavorites.map((server) => {
              const isPingUpdated = pingUpdates[server.id] && pingUpdates[server.id] !== server.ping;
              return (
                <div 
                  key={server.id} 
                  className="p-3 bg-accent/30 rounded-lg border border-border/50 hover:bg-accent/50 transition-all duration-200 group cursor-pointer"
                  onClick={() => connectionStatus.status === 'idle' && handleConnect(server)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <div>
                        <p className="text-sm font-medium text-foreground flex items-center gap-1">
                          {server.name}
                          {server.hasPassword && (
                            <svg className="w-3 h-3 text-muted-foreground" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                            </svg>
                          )}
                          {smartRecommendations.find(r => r.serverId === server.id) && (
                            <TrophyIcon size={12} className="text-yellow-400" />
                          )}
                        </p>
                        <p className="text-xs text-muted-foreground">{server.game}</p>
                      </div>
                    </div>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-xs px-2 py-1 h-auto"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleConnect(server);
                      }}
                      disabled={connectionStatus.status !== 'idle'}
                    >
                      –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    </Button>
                  </div>
                  
                  <div className="flex items-center justify-between text-xs">
                    <div className="flex items-center space-x-3">
                      <span className={`flex items-center ${getServerHealthColor(server)}`}>
                        <GroupUsersIcon size={12} className="mr-1" />
                        {server.playerCount.online}/{server.playerCount.total}
                      </span>
                      <span className={`font-mono ${getPingColor(server.ping)} ${isPingUpdated ? 'animate-pulse' : ''}`}>
                        {server.ping}ms
                      </span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="text-green-400 text-xs">
                        {Math.round((server.playerCount.online / server.playerCount.total) * 100)}%
                      </span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
          
          {data.favoriteServers.length > 3 && (
            <Button 
              variant="ghost" 
              size="sm" 
              className="w-full mt-2 text-xs"
              onClick={() => setShowAllFavorites(!showAllFavorites)}
            >
              {showAllFavorites 
                ? "–°–∫—Ä—ã—Ç—å" 
                : `–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ${data.favoriteServers.length - 3}`
              }
            </Button>
          )}
        </div>

        {/* –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div>
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-medium text-foreground">–ù–µ–¥–∞–≤–Ω–∏–µ</h4>
            <Button
              variant="ghost"
              size="sm"
              className="text-xs px-2 py-1 h-auto"
              onClick={() => {
                addNotification("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞");
                setData(prev => ({ ...prev, recentServers: [] }));
              }}
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </Button>
          </div>
          
          <div className="space-y-2">
            {visibleRecent.map((server) => (
              <div 
                key={server.id}
                className="flex items-center justify-between p-2 rounded-lg hover:bg-accent/50 transition-all duration-200 group"
              >
                <div className="flex items-center space-x-3">
                  <div>
                    <p className="text-sm font-medium text-foreground">{server.name}</p>
                    <p className="text-xs text-muted-foreground">
                      {formatLastJoined(server.lastJoined)} ‚Ä¢ {server.duration}–º ‚Ä¢ {server.game}
                    </p>
                  </div>
                </div>
                <div className="flex space-x-1">
                  <Button 
                    variant="ghost" 
                    size="sm"
                    className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-xs px-2 py-1 h-auto"
                    onClick={() => handleReconnect(server)}
                    disabled={connectionStatus.status !== 'idle'}
                  >
                    üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-xs px-2 py-1 h-auto"
                    onClick={() => {
                      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
                      addNotification(`‚≠ê ${server.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ`);
                    }}
                  >
                    ‚≠ê
                  </Button>
                </div>
              </div>
            ))}
          </div>

          {data.recentServers.length > 2 && (
            <Button 
              variant="ghost" 
              size="sm" 
              className="w-full mt-2 text-xs"
              onClick={() => setShowAllRecent(!showAllRecent)}
            >
              {showAllRecent 
                ? "–°–∫—Ä—ã—Ç—å" 
                : `–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ${data.recentServers.length - 2}`
              }
            </Button>
          )}
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div className="pt-2 border-t border-border">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="auto-reconnect"
                checked={autoReconnectEnabled}
                onChange={(e) => setAutoReconnectEnabled(e.target.checked)}
                className="w-3 h-3 text-primary bg-transparent border-border rounded focus:ring-primary focus:ring-1"
              />
              <label htmlFor="auto-reconnect" className="text-xs text-muted-foreground">
                –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
              </label>
            </div>
            <Button
              variant="ghost"
              size="sm"
              className="text-xs px-2 py-1 h-auto"
              onClick={() => {
                addNotification("üîß –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...");
              }}
            >
              <CalendarIcon size={12} className="mr-1" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
          </div>
        </div>
      </div>
    </WidgetContainer>
  );
}; 