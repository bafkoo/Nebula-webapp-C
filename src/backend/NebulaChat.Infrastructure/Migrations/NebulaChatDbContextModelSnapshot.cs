// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NebulaChat.Infrastructure.Data;

#nullable disable

namespace NebulaChat.Infrastructure.Migrations
{
    [DbContext(typeof(NebulaChatDbContext))]
    partial class NebulaChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NebulaChat.Domain.Entities.AdminActionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_AdminActionLogs_ActionType");

                    b.HasIndex("AdminId")
                        .HasDatabaseName("IX_AdminActionLogs_Admin");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("IX_AdminActionLogs_Chat");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("IX_AdminActionLogs_Timestamp");

                    b.ToTable("AdminActionLogs");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.BannedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BannedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BannedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BannedById");

                    b.HasIndex("UserId");

                    b.HasIndex("ChatId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_BannedUsers_Unique");

                    b.ToTable("BannedUsers");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastMessageAt")
                        .IsDescending()
                        .HasDatabaseName("IX_Chats_LastMessageAt");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Chats_Name_Search");

                    b.HasIndex("IsArchived", "LastMessageAt")
                        .HasDatabaseName("IX_Chats_ActiveChats")
                        .HasFilter("[IsArchived] = 0");

                    b.HasIndex("Type", "CreatedBy");

                    b.ToTable("Chats", t =>
                        {
                            t.HasCheckConstraint("CK_Chat_MaxParticipants", "\"MaxParticipants\" > 0 AND \"MaxParticipants\" <= 10000");
                        });
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.ChatInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InviteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InviterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("IX_ChatInvites_Chat");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_ChatInvites_ExpiresAt");

                    b.HasIndex("InviteeId")
                        .HasDatabaseName("IX_ChatInvites_Invitee");

                    b.HasIndex("InviterId");

                    b.ToTable("ChatInvites");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.ChatParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BanReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("BannedUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastReadMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LastReadMessageId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ChatParticipants_User");

                    b.HasIndex("ChatId", "IsBanned")
                        .HasDatabaseName("IX_ChatParticipants_Chat_Active")
                        .HasFilter("[IsBanned] = 0");

                    b.HasIndex("ChatId", "JoinedAt")
                        .HasDatabaseName("IX_ChatParticipants_Chat_Joined");

                    b.HasIndex("ChatId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_ChatParticipants_Unique");

                    b.HasIndex("UserId", "NotificationsEnabled")
                        .HasDatabaseName("IX_ChatParticipants_Notifications")
                        .HasFilter("[NotificationsEnabled] = 1");

                    b.HasIndex("UserId", "LastReadMessageId", "ChatId")
                        .HasDatabaseName("IX_ChatParticipants_UnreadMessages");

                    b.ToTable("ChatParticipants");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ReplyToMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("IX_Messages_Author");

                    b.HasIndex("ReplyToMessageId")
                        .HasDatabaseName("IX_Messages_ReplyTo")
                        .HasFilter("[ReplyToMessageId] IS NOT NULL");

                    b.HasIndex("ChatId", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_Messages_Chat_CreatedAt");

                    b.HasIndex("ChatId", "IsDeleted")
                        .HasDatabaseName("IX_Messages_Chat_Deleted")
                        .HasFilter("[IsDeleted] = 1");

                    b.HasIndex("ChatId", "IsEdited")
                        .HasDatabaseName("IX_Messages_Chat_Edited")
                        .HasFilter("[IsEdited] = 1");

                    b.ToTable("Messages", t =>
                        {
                            t.HasCheckConstraint("CK_Message_FileSize", "\"FileSize\" IS NULL OR \"FileSize\" <= 52428800");
                        });
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppleId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GitHubId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GitHubId");

                    b.HasIndex("GoogleId");

                    b.HasIndex("LastLoginAt");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.AdminActionLog", b =>
                {
                    b.HasOne("NebulaChat.Domain.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.BannedUser", b =>
                {
                    b.HasOne("NebulaChat.Domain.Entities.User", "BannedBy")
                        .WithMany()
                        .HasForeignKey("BannedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.Chat", "Chat")
                        .WithMany("BannedUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BannedBy");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.Chat", b =>
                {
                    b.HasOne("NebulaChat.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.ChatInvite", b =>
                {
                    b.HasOne("NebulaChat.Domain.Entities.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.User", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.ChatParticipant", b =>
                {
                    b.HasOne("NebulaChat.Domain.Entities.Chat", "Chat")
                        .WithMany("Participants")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.Message", "LastReadMessage")
                        .WithMany()
                        .HasForeignKey("LastReadMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NebulaChat.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("LastReadMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.Message", b =>
                {
                    b.HasOne("NebulaChat.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NebulaChat.Domain.Entities.Message", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Chat");

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.Chat", b =>
                {
                    b.Navigation("BannedUsers");

                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("NebulaChat.Domain.Entities.Message", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
