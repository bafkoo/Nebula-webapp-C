using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using NebulaChat.API.DTOs.Chat;
using NebulaChat.API.Hubs;
using System.Security.Claims;

namespace NebulaChat.API.Controllers;

/// <summary>
/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–∞—Ö
/// </summary>
[ApiController]
[Route("api/")]
[Authorize]
public class MessagesController : ControllerBase
{
    private readonly ILogger<MessagesController> _logger;
    private readonly IHubContext<ChatHub> _hubContext;
    // TODO: –î–æ–±–∞–≤–∏—Ç—å IMessageService –∏ IChatService

    public MessagesController(ILogger<MessagesController> logger, IHubContext<ChatHub> hubContext)
    {
        _logger = logger;
        _hubContext = hubContext;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    /// </summary>
    /// <param name="chatId">ID —á–∞—Ç–∞</param>
    /// <param name="page">–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)</param>
    /// <param name="pageSize">–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∞–∫—Å–∏–º—É–º 100)</param>
    [HttpGet("chats/{chatId}/messages")]
    public async Task<IActionResult> GetChatMessages(Guid chatId, [FromQuery] int page = 1, [FromQuery] int pageSize = 50)
    {
        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {ChatId}", userId, chatId);

        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —á–∞—Ç

        if (pageSize > 100) pageSize = 100;

        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        var messages = new List<MessageDto>
        {
            new MessageDto { Id = Guid.NewGuid(), ChatId = chatId, Content = "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üëã", CreatedAt = DateTime.UtcNow.AddMinutes(-2), AuthorUsername = "Admin" },
            new MessageDto { Id = Guid.NewGuid(), ChatId = chatId, Content = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nebula Chat!", CreatedAt = DateTime.UtcNow.AddMinutes(-1), AuthorUsername = "System" }
        };

        return Ok(messages);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    /// </summary>
    /// <param name="chatId">ID —á–∞—Ç–∞</param>
    /// <param name="request">–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</param>
    [HttpPost("chats/{chatId}/messages")]
    public async Task<IActionResult> SendMessage(Guid chatId, [FromBody] SendMessageRequest request)
    {
        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {ChatId}", userId, chatId);

        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞, —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î

        var message = new MessageDto
        {
            Id = Guid.NewGuid(),
            ChatId = chatId,
            Content = request.Content,
            AuthorId = Guid.Parse(userId!),
            AuthorUsername = User.Identity?.Name,
            CreatedAt = DateTime.UtcNow
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ —á–µ—Ä–µ–∑ SignalR
        await _hubContext.Clients.Group(chatId.ToString()).SendAsync("ReceiveMessage", message);

        return CreatedAtAction(nameof(GetChatMessages), new { chatId = chatId }, message);
    }
    
    /// <summary>
    /// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// </summary>
    /// <param name="messageId">ID —Å–æ–æ–±—â–µ–Ω–∏—è</param>
    /// <param name="request">–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</param>
    [HttpPut("messages/{messageId}")]
    public async Task<IActionResult> EditMessage(Guid messageId, [FromBody] EditMessageRequest request)
    {
        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId}", userId, messageId);

        // TODO: 1. –ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ messageId, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å chatId
        // TODO: 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        // TODO: 3. –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î

        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        var placeholderChatId = Guid.Parse("00000000-0000-0000-0000-000000000001");
        
        var editedMessage = new MessageDto
        {
            Id = messageId,
            ChatId = placeholderChatId,
            Content = request.Content,
            IsEdited = true,
            EditedAt = DateTime.UtcNow,
            AuthorId = Guid.Parse(userId!),
            AuthorUsername = User.Identity?.Name,
            CreatedAt = DateTime.UtcNow.AddMinutes(-10) // Placeholder
        };

        // 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å broadcast "MessageEdited" –≤ –≥—Ä—É–ø–ø—É —á–∞—Ç–∞
        await _hubContext.Clients.Group(placeholderChatId.ToString()).SendAsync("MessageEdited", editedMessage);

        return NoContent();
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// </summary>
    /// <param name="messageId">ID —Å–æ–æ–±—â–µ–Ω–∏—è</param>
    [HttpDelete("messages/{messageId}")]
    public async Task<IActionResult> DeleteMessage(Guid messageId)
    {
        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
         _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId}", userId, messageId);

        // TODO: 1. –ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ messageId, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å chatId
        // TODO: 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        // TODO: 3. –ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤ –ë–î (soft delete)

        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        var placeholderChatId = Guid.Parse("00000000-0000-0000-0000-000000000001");

        // 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å broadcast "MessageDeleted" –≤ –≥—Ä—É–ø–ø—É —á–∞—Ç–∞ —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è
        await _hubContext.Clients.Group(placeholderChatId.ToString()).SendAsync("MessageDeleted", new { MessageId = messageId, ChatId = placeholderChatId });

        return NoContent();
    }

    [HttpPost("{chatId}/messages/{messageId}/pin")]
    public async Task<IActionResult> PinMessage(Guid chatId, Guid messageId)
    {
        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ (–∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å SignalR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        return await Task.FromResult(Ok());
    }
}

// DTO –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
public class EditMessageRequest
{
    public string Content { get; set; } = string.Empty;
} 